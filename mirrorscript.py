import re
import os
import sys
import subprocess
import time

from operator import itemgetter
from shutil import copyfile

import threading

#Banner
print """

'##::::'##:'####:'########::'########:::'#######::'########:::'######:::'######::'########::'####:'########::'########:
 ###::'###:. ##:: ##.... ##: ##.... ##:'##.... ##: ##.... ##:'##... ##:'##... ##: ##.... ##:. ##:: ##.... ##:... ##..::
 ####'####:: ##:: ##:::: ##: ##:::: ##: ##:::: ##: ##:::: ##: ##:::..:: ##:::..:: ##:::: ##:: ##:: ##:::: ##:::: ##::::
 ## ### ##:: ##:: ########:: ########:: ##:::: ##: ########::. ######:: ##::::::: ########::: ##:: ########::::: ##::::
 ##. #: ##:: ##:: ##.. ##::: ##.. ##::: ##:::: ##: ##.. ##::::..... ##: ##::::::: ##.. ##:::: ##:: ##.....:::::: ##::::
 ##:.:: ##:: ##:: ##::. ##:: ##::. ##:: ##:::: ##: ##::. ##::'##::: ##: ##::: ##: ##::. ##::: ##:: ##::::::::::: ##::::
 ##:::: ##:'####: ##:::. ##: ##:::. ##:. #######:: ##:::. ##:. ######::. ######:: ##:::. ##:'####: ##::::::::::: ##::::
..:::::..::....::..:::::..::..:::::..:::.......:::..:::::..:::......::::......:::..:::::..::....::..::::::::::::..:::::
"""
print "https://github.com/tamsee1/mirrorscript"
print ""
print "type 'help' to display option and usage"
print ""

mirrors = {
'http://mirror.karneval.cz/pub/linux/kali/' : 0,
'http://ftp.acc.umu.se/mirror/kali.org/kali/' : 0,
'http://mirror.serverion.com/kali/' : 0,
'http://mirrors.dotsrc.org/kali/' : 0,
'http://mirror.pyratelan.org/kali/' : 0,
'http://ftp.halifax.rwth-aachen.de/kali/' : 0,
'http://ftp.belnet.be/pub/kali/kali/' : 0,
'http://ftp1.nluug.nl/os/Linux/distr/kali/' : 0,
'http://ftp2.nluug.nl/os/Linux/distr/kali/' : 0,
'http://mirror.neostrada.nl/kali/' : 0,
'http://mirror.serverius.net/kali/' : 0,
'http://archive-4.kali.org/kali/' : 0,
'http://ftp.free.fr/pub/kali/' : 0,
'http://mirror.lagoon.nc/kali/' : 0,
'http://hlzmel.fsmg.org.nz/kali/' : 0,
'http://wlglam.fsmg.org.nz/kali/' : 0,
'http://mirror.anquan.cl/kali/' : 0,
'http://mirrors.ocf.berkeley.edu/kali/' : 0,    
'http://mirror-1.truenetwork.ru/kali/' : 0,    
'http://kali.download/kali/' : 0,    
'http://ftp.harukasan.org/kali/' : 0,   
'http://ftp.yzu.edu.tw/Linux/kali' : 0 ,
'http://kali.cs.nctu.edu.tw/kali' : 0,
'http://kali.mirror.garr.it/mirrors/kali' : 0 ,
'http://mirrors.dotsrc.org/kali' : 0,
'http://archive-3.kali.org/kali' : 0,
'http://ftp.halifax.rwth-aachen.de/kali' : 0 ,
'http://ftp2.nluug.nl/os/Linux/distr/kali' : 0,
'http://ftp1.nluug.nl/os/Linux/distr/kali' : 0 ,
'http://nl.mirror.babylon.network/kali' : 0 ,
'http://mirror.neostrada.nl/kali' : 0 ,
'http://archive-4.kali.org/kali' : 0 ,
'http://ftp.free.fr/pub/kali' : 0 ,
'http://fr.mirror.babylon.network/kali' : 0 ,
'http://ftp.hands.com/kali' : 0 ,
'http://kali.mirror.globo.tech/kali' : 0 ,
'http://archive-11.kali.org/kali' : 0 ,
'http://archive-9.kali.org/kali' : 0 ,
'http://archive-12.kali.org/kali' : 0 ,
'http://archive-10.kali.org/kali' : 0 ,
'http://archive-6.kali.org/kali' : 0 ,
'http://archive-5.kali.org/kali' : 0 ,
'http://archive-2.kali.org/kali' : 0 ,
'http://archive-8.kali.org/kali' : 0 ,
'http://mirror.pwnieexpress.com/kali' : 0 ,
'http://archive-7.kali.org/kali' : 0 ,
'http://mirrors.ocf.berkeley.edu/kali' : 0
}

#help menu
choices = {
    'help' : 'Display options and usage',
    'show' : 'Display the list of mirrors',
    'update' : 'Update sources.list with the chosen mirror',
    'exit' : 'Exit from the script',
    'rank' : 'Rank the mirrors and display'
}
def backUp():
    copyfile('/etc/apt/sources.list', '/etc/apt/sources.list.bk')
    print "     Making a backup file /etc/apt/sources.list.bk ..."

def check():
    backUp()
    print "     Checking sources.list for older entries ..."
    contents = []
    file = open("/etc/apt/sources.list", "r+")
    print "     Commenting older entries ..."
    for line in file.readlines():
        if re.search('^deb http://http.kali.org/kali', line, re.I) or re.search('^deb-src http://http.kali.org/kali', line, re.I):
            newline = "#" + line
            file.write(newline)
            contents.append(newline)
        elif re.search("^#Autogenerated", line, re.I):
            break
        else:
            contents.append(line)
    file.seek(0)
    file.truncate()
    file.seek(0)
    for line in contents:
        file.write(line)
    file.close()
    print "     Done"

def update(mirror):
    print "     Updating sources.list with new entry ..."
    temp = "sudo sh -c \'echo \"\n#Autogenerated script by mirrorscript\" >> /etc/apt/sources.list\'"
    print subprocess.Popen(temp, shell=True, stdout=subprocess.PIPE).stdout.read()
    line = "deb " + mirror + " kali-rolling main contrib non-free"
    temp = "sudo sh -c \'echo %s >> /etc/apt/sources.list\'"
    print subprocess.Popen(temp % line, shell=True, stdout=subprocess.PIPE).stdout.read()
    line = "deb-src " + mirror + " kali-rolling main contrib non-free"
    temp = "sudo sh -c \'echo %s >> /etc/apt/sources.list\'"
    print subprocess.Popen(temp % line, shell=True, stdout=subprocess.PIPE).stdout.read()
    print "     Done"
    print "     run apt-get update for the changes to load.\n\n"
def rankDisplay():
    print "+-----------------------------------------------------+---------------------------------------------+"
    print ("|    MIRRORS" + '\t' + "    |    LATENCY                                  |").expandtabs(50)
    print "+-----------------------------------------------------+---------------------------------------------+"
    for k, v in sorted(mirrors.items(), key=itemgetter(1)):
        if v[0] == 'R':
            print ("|    "+ k + '\t' + "    |    " + v + "\t|").expandtabs(50)
        else:
            print ("|    "+ k + '\t' + "    |    " + str(v) + "ms\t|" ).expandtabs(50)
    print "+-----------------------------------------------------+---------------------------------------------+"
    print ""
    print "* -> You can try ranking the mirrors again, if Request Timed Out"


def rank():
    print "    Please wait, indexing mirrors according to their latency..."
    i = 0
    threads = []
    for mirror in mirrors:
        threads.append(threading.Thread(target=rank_thread, args=(i, mirror,)))
        threads[i].start()
        i += 1

    i = 0
    for mirror in mirrors:
        threads[i].join()
        i += 1

    print "\n    Done"
    rankDisplay()

def rank_thread(i, mirror):
    try:
        temp = []
        avg = 0
        pattern = re.search(r'(//)((?:\\.|[^/\\])*)/', mirror, re.I)
        url = pattern.group(2)
        temp.append([line.rpartition('=')[-1] for line in subprocess.check_output(['ping', '-c', '3', url]).splitlines()[1:-4]])
        for j in range(len(temp[0])):
            avg += float(temp[0][j][:-3])
        avg = avg/len(temp[0])
        mirrors[mirror] = '{0:.1f}'.format(avg)
        sys.stdout.write("    Thead scanning : {0}\r".format(i+1))
        sys.stdout.flush()
    except subprocess.CalledProcessError:
        mirrors[mirror] = "Request Timed Out*"
        sys.stdout.write("    Thead scanning : {0}\r".format(i+1))
        sys.stdout.flush()



def showMirror():
    i = 1
    print ""
    print "     +------------------------------------------------------+"
    print "     |                       MIRRORS                        |"
    print "     +------------------------------------------------------+"
    for mirror in mirrors:
        print ("     | " + mirror + "\t" + "|").expandtabs(30)
        i += 1
    print "     +------------------------------------------------------+"

def helpMenu():
    print ""
    print ("    COMMANDS" + '\t' + "DESCRIPTION").expandtabs(30)
    print ""
    for key, value in choices.items():
        if key == 'update':
            print ("    " + key + ' [option]' '\t' + value).expandtabs(30)
        else:
            print ("    " + key + '\t' + value).expandtabs(30)
    print ""
    print ""
    print "    USAGE : update [mirror] - select one of the mirrors available"
    print ""

def main():
    choice = []
    status = ""
    if os.geteuid() != 0:
        print("running mirrorscript in root")
        subprocess.call(['sudo', 'python2' ] + sys.argv)
    else:
        pass
    while status != "exit":
        choice = list(map(str, raw_input('mirrorscript> ').split()))
        if choice[0] not in choices:
            print "    Invalid option"
        if choice[0] == "show":
            showMirror()
        elif choice[0] == "help":
            helpMenu()
        elif choice[0] == "rank":
            rank()
        elif choice[0] == "update":
            if len(choice) == 1:
                print "     # Enter the mirror, type help for usage"
                continue
            else:
                check()
                update(choice[1])
        elif choice[0] == "exit":
            status = "exit"

if __name__ == "__main__":
    main()
